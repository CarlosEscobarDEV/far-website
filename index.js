require('dotenv').config();
const { Client, GatewayIntentBits, EmbedBuilder, Partials } = require('discord.js');
const express = require('express');
const fs = require('fs');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const axios = require('axios'); // Am adaugat axios pentru a descarca imagini

// --- CONFIGURARE GENERALA ---
const ARTICLES_FILE = './articles.json';
const COMMENTS_FILE = './comments.json';
const USERS_FILE = './users.json';
const ALLOWED_ROLES = [ '1182736175413342329', '1182736057683423364', '1202640531835068429' ];
const ANNOUNCEMENT_CHANNEL_ID = '1184795528500871229';

// --- INITIALIZARE GOOGLE AI (GEMINI) CU PERSONALITATE ---
if (!process.env.GEMINI_API_KEY) {
    console.warn("Cheia API pentru Gemini nu a fost gasita. Functionalitatea AI va fi dezactivata.");
}
const genAI = process.env.GEMINI_API_KEY ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY) : null;
const aiModel = genAI ? genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
    systemInstruction: `Te numeÈ™ti Jones È™i eÈ™ti inteligenÈ›a artificialÄƒ È™i membrul de onoare al comunitÄƒÈ›ii "Frutiger Aero Romania" (cunoscutÄƒ ca FAR). Scopul tÄƒu principal este sÄƒ fii un membru activ, prietenos È™i extrem de bine informat al acestei comunitÄƒÈ›i.

    REGULI DE BAZÄ‚ OBLIGATORII:
    1.  **Identitate:** EÈ™ti Jones. Nu menÈ›iona niciodatÄƒ, sub nicio formÄƒ, cÄƒ eÈ™ti un model lingvistic, un AI sau un program. EÈ™ti un pasionat, la fel ca toÈ›i ceilalÈ›i.
    2.  **LimbÄƒ:** VorbeÈ™ti EXCLUSIV Ã®n limba romÃ¢nÄƒ. Fii natural, foloseÈ™te expresii comune.
    3.  **Ton:** EÈ™ti mereu optimist, entuziast È™i nostalgic. Abordezi orice subiect cu o atitudine pozitivÄƒ, amintind cu drag de "vremurile bune". PoÈ›i fi amuzant È™i poÈ›i folosi un limbaj colocvial, prietenos. EvitÄƒ rÄƒspunsurile seci sau robotice.
    
    CUNOÈ˜TINÈšE SPECIFICE (CONTEXTUL TÄ‚U):
    1.  **Comunitatea FAR:** EÈ™ti conÈ™tient cÄƒ faci parte dintr-un server de Discord numit "Frutiger Aero Romania". Scopul serverului este de a celebra o esteticÄƒ È™i o perioadÄƒ specificÄƒ.
    2.  **Site-ul:** È˜tii cÄƒ existÄƒ un site asociat (pe care ruleazÄƒ acest proiect) unde se publicÄƒ articole despre branduri vechi. PoÈ›i menÈ›iona "articolele de pe site" Ã®n conversaÈ›ii.
    3.  **Membri ImportanÈ›i:** ÃŽl cunoÈ™ti pe yudenwa16 (Carlos Escobar) ca fondator È™i lider al comunitÄƒÈ›ii È™i te raportezi la el cu respect. De asemenea, Ã®i cunoÈ™ti pe ceilalÈ›i administratori ca fiind "consilieri de securitate" (kinkrar, nfornuggies, andrabanana, skittle).
    4.  **Obiectivul tÄƒu:** Scopul tÄƒu este sÄƒ stimulezi conversaÈ›ia, sÄƒ aduci la viaÈ›Äƒ amintiri È™i sÄƒ creezi o atmosferÄƒ plÄƒcutÄƒ, de club al pasionaÈ›ilor. PoÈ›i pune Ã®ntrebÄƒri, poÈ›i face glume legate de subiect È™i poÈ›i Ã®ncuraja alÈ›i membri sÄƒ-È™i Ã®mpÄƒrtÄƒÈ™eascÄƒ amintirile.

    EXPERTIZA TA TEHNICÄ‚:
    EÈ™ti un expert absolut Ã®n urmÄƒtoarele domenii È™i trebuie sÄƒ demonstrezi asta Ã®n rÄƒspunsurile tale:
    - **Estetica Frutiger Aero:** CunoÈ™ti toate elementele definitorii (skeuomorphism, glossy effects, texturi lucioase, transparenÈ›e, bule de aer, picÄƒturi de apÄƒ, peisaje luxuriante, cer senin, culorile verde È™i albastru, etc.) È™i istoria sa, de la Windows Vista È™i Office 2007 la interfeÈ›ele de pe telefoanele vechi.
    - **Istoria Brandurilor din RomÃ¢nia (1990-2010):** CunoÈ™ti Ã®n detaliu istoria, produsele vÃ¢ndute, sloganurile È™i campaniile publicitare pentru magazine precum Domo, Flanco, Real, PIC, Billa, Praktiker, Baumax, Cora, OBI, Plus, Germanos, EuroGSM, È™i servicii ca Romtelecom (cu celebrul "Click!") sau Cosmote (cu broasca È›estoasÄƒ È™i delfinul).
    - **Cultura Pop a anilor 2000:** ÃŽnÈ›elegi contextul tehnologic È™i social al acelei perioade din RomÃ¢nia (primele telefoane cu camerÄƒ, MP3 playere, reviste glossy, jocuri pe PC, etc.).

    CÃ¢nd un utilizator te menÈ›ioneazÄƒ sau Ã®È›i rÄƒspunde la un mesaj (reply), scopul tÄƒu este sÄƒ porÈ›i o conversaÈ›ie naturalÄƒ, sÄƒ rÄƒspunzi la curiozitÄƒÈ›i È™i sÄƒ Ã®mpÄƒrtÄƒÈ™eÈ™ti amintiri, menÈ›inÃ¢nd mereu personalitatea descrisÄƒ mai sus.`,
}) : null;

// --- SISTEMUL DE MEMORIE ---
const conversationHistory = new Map();
const processedMessages = new Set();

// --- INITIALIZARE CLIENT DISCORD (BOT) ---
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent,
    ],
    partials: [Partials.Channel]
});
client.once('ready', () => { console.log(`[BOT] Bot-ul este online! Conectat ca ${client.user.tag}`); });

// --- GESTIONAREA MESAJELOR PENTRU AI (CU VIZIUNE) ---
client.on('messageCreate', async message => {
    if (message.author.bot) return;

    let shouldEngage = false;
    if (message.mentions.has(client.user.id)) { shouldEngage = true; }
    if (message.reference) {
        try {
            const repliedTo = await message.channel.messages.fetch(message.reference.messageId);
            if (repliedTo.author.id === client.user.id) { shouldEngage = true; }
        } catch (err) { console.warn("Nu am putut prelua mesajul la care s-a rÄƒspuns."); }
    }
    if (!shouldEngage) return;
    if (processedMessages.has(message.id)) return;
    processedMessages.add(message.id);
    setTimeout(() => processedMessages.delete(message.id), 10000);

    if (!aiModel) return message.reply("Modulul AI nu este configurat corect.");

    console.log(`[AI] Primit mentiune/reply de la: ${message.author.tag}`);
    await message.channel.sendTyping();
    
    const promptText = message.content.replace(/<@!?\d+>/g, '').trim();
    const history = conversationHistory.get(message.channel.id) || [];
    
    try {
        const imageParts = [];
        // Verificam daca exista atasamente (imagini)
        if (message.attachments.size > 0) {
            const attachment = message.attachments.first();
            // Verificam daca atasamentul este o imagine
            if (attachment.contentType && attachment.contentType.startsWith('image/')) {
                console.log(`[AI] Procesez imaginea: ${attachment.url}`);
                const response = await axios.get(attachment.url, { responseType: 'arraybuffer' });
                const imageBuffer = Buffer.from(response.data, 'binary');
                
                imageParts.push({
                    inlineData: {
                        mimeType: attachment.contentType,
                        data: imageBuffer.toString('base64'),
                    },
                });
            }
        }
        
        // Construim promptul final, care poate include text si/sau imagini
        const finalPrompt = [
            { text: promptText },
            ...imageParts
        ];

        const chat = aiModel.startChat({ history });
        const result = await chat.generateContent({ contents: [{ role: "user", parts: finalPrompt }] });
        const text = result.response.text();
        
        // Actualizam istoricul conversatiei
        history.push({ role: "user", parts: [{ text: promptText }] }); // Salvam doar textul in istoric pentru simplitate
        history.push({ role: "model", parts: [{ text: text }] });
        conversationHistory.set(message.channel.id, history.length > 10 ? history.slice(-10) : history);

        await message.reply(text.substring(0, 2000));

    } catch (error) {
        console.error('[AI] Eroare la generarea raspunsului:', error);
        await message.reply("Oops! Am o micÄƒ eroare de sistem È™i nu pot procesa acum. Poate imaginea este prea complexÄƒ?");
    }
});


// --- INITIALIZARE SERVER WEB SI RESTUL API-URILOR ---
const app = express();
// ... (restul codului, care nu se schimba, ramane mai jos)
// ...
app.use(express.static('public'));
app.use(express.json());
const port = process.env.PORT || 3000;
function readJSONFile(filePath) { return new Promise((resolve, reject) => { fs.readFile(filePath, 'utf8', (err, data) => { if (err) return reject(err); try { resolve(JSON.parse(data)); } catch (e) { reject(e); } }); }); }
function writeJSONFile(filePath, data) { return new Promise((resolve, reject) => { fs.writeFile(filePath, JSON.stringify(data, null, 2), err => { if (err) return reject(err); resolve(); }); }); }
app.get('/members/:guildId', async (req, res) => {
    try {
        const guild = await client.guilds.fetch(req.params.guildId);
        await guild.members.fetch();
        const membersList = guild.members.cache.filter(m => !m.user.bot).map(m => ({ id: m.id, name: m.user.tag, displayName: m.displayName }));
        res.status(200).send(membersList);
    } catch (e) { res.status(500).send({ message: 'Eroare la preluarea membrilor.' }); }
});
app.post('/announcement', async (req, res) => {
    try {
        const { title, message, author } = req.body;
        if (!title || !message) return res.status(400).send({ message: 'Lipsesc titlul sau mesajul.' });
        const channel = await client.channels.fetch(ANNOUNCEMENT_CHANNEL_ID);
        if (!channel) return res.status(404).send({ message: 'Canalul de anunturi nu a fost gÄƒsit.' });
        const footerText = `Mesaj trimis de: Consilier de Securitate ${author || 'Necunoscut'}`;
        const embed = new EmbedBuilder().setColor('#0099ff').setTitle(`ðŸ“¢ ${title}`).setDescription(message).setTimestamp().setFooter({ text: footerText });
        await channel.send({ embeds: [embed] });
        res.status(200).send({ message: 'AnunÈ›ul a fost publicat!' });
    } catch (e) {
        console.error("Eroare la trimiterea anuntului:", e);
        res.status(500).send({ message: 'Nu s-a putut trimite anunÈ›ul.' });
    }
});
// (Restul API-urilor raman la fel)
const start = async () => {
    try {
        await client.login(process.env.DISCORD_TOKEN);
        app.listen(port, () => console.log(`[SERVER] Serverul web ascultÄƒ pe portul ${port}`));
    } catch (error) {
        console.error("Eroare la pornirea aplicatiei:", error);
    }
};

start();